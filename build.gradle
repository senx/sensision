//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

import java.text.SimpleDateFormat

buildscript {
  repositories {
    jcenter()
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id "com.jfrog.bintray" version "1.7.3"
}

// ------------------------------------------------------------------
//                    AUTO RELEASE MANAGEMENT
// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
// ------------------------------------------------------------------
def getVersionName(String revision) {
  String newRevision = revision

  if (!revision.endsWith('SNAPSHOT')) {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    newRevision = stdout.toString().trim()
  }
  return newRevision
}

def updateRevision(String revision) {
  //
  // update Revision File
  //
  File versionFile = new File(rootProject.projectDir, "sensision/src/main/java/io/warp10/Revision.java")
  String fileContent = versionFile.text
  String newContent = fileContent.replaceAll(/(REVISION = ")(.*)(";)/){
    fullMatch, varName, oldVersion, endLine -> return "$varName$revision$endLine"
  }
  versionFile.write(newContent)

  return revision
}

//
// Check local git repo is synced with the remote
//
def isGitRepoSynced() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'status', '-u', 'no', '--porcelain'
    standardOutput = stdout
  }

  //
  // Exclude gradle.properties
  //
  String val = stdout.toString().replaceAll(/.*\/gradle.properties\n/, '')

  return (0 == val.trim().size())
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  group = 'io.warp10'

  //
  // Java Compilation flags
  //

  compileJava {
    //options.compilerArgs << '-g:none'
    options.compilerArgs << '-source'
    options.compilerArgs << '1.5'
    options.compilerArgs << '-target'
    options.compilerArgs << '1.5'
  }

  ext{
    stagingUser = project.hasProperty('stagingUser') ? project.property('stagingUser') : System.getenv('STAGEING_USER')
    stagingURL = project.hasProperty('stagingURL') ? project.property('stagingURL') : System.getenv('STAGEING_URL')

    if (null == stagingUser || null == stagingURL) {
      stagingUser = ''
      stagingURL = ''
    }

    sensisionLibPublishUser = project.hasProperty('sensisionLibPublishUser') ? project.property('sensisionLibPublishUser') : System.getenv('SENSISIONLIBPUBLISH_USER')
    sensisionLibPublishURL = project.hasProperty('sensisionLibPublishURL') ? project.property('sensisionLibPublishURL') : System.getenv('SENSISIONLIBPUBLISH_URL')

    if (null == sensisionLibPublishUser || null == sensisionLibPublishURL) {
      sensisionLibPublishUser = ''
      sensisionLibPublishURL = ''
    }

    gradle.taskGraph.whenReady { graph ->
      println "building sensision version=$version"
      if (graph.hasTask(uploadArchives) || graph.hasTask(bintrayUpload)) {
        if (!isGitRepoSynced()) {
          throw new GradleException("Cannot upload archive: local repo contains uncommited files (git status -u no --porcelain)")
       }
      }

     }
  }

  configurations {
    tools
    deployerJars
  }

  repositories {
    mavenCentral()
    maven {
      url "http://127.0.0.1:40080/m2"
    }
    maven {
      url "https://repository.apache.org/service/local/repositories/releases/content"
    }
  }

  //
  // Global dependencies
  //

  dependencies {
    // Jetty 9 is compiled using JDK7 cf http://webtide.intalio.com/2012/09/jetty-9-features/
    //compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.0.5.v20130815'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '8.1.12.v20130726'
    compile group: 'junit', name: 'junit', version: '4.4'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.9'
    // Hadoop for SensisionSink
    compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.10.1'
    //compile group: 'commons-configuration', name: 'commons-configuration', version: '1.6'
    // Yammer Metrics for SensisionReporter
    compile group: 'com.yammer.metrics', name: 'metrics-core', version: '2.2.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    // Java Merge Sort
    compile group: 'com.fasterxml.util', name: 'java-merge-sort', version: '1.0.0'
    // Kafka
    compile("org.apache.kafka:kafka_2.9.2:0.8.1") {
      exclude module: 'jms'
      exclude module: 'jmxtools'
      exclude module: 'jmxri'
    }

    compile group:'com.google.guava', name:'guava', version: '19.0'

    tools files('tools/jarjar-1.4.jar')

    //UPLOAD ARTIFACTS THROUGH SSH
    deployerJars 'org.apache.maven.wagon:wagon-ssh-external:2.8'
  }
}

project(':sensision') {
  version = updateRevision(getVersionName(''))
  archivesBaseName = 'sensision-service'
  group = 'io.warp10'

  sourceSets {
    main {
      java {
        srcDirs 'src/main/java'
      }
    }
  }

  jar {
    manifest {
      attributes("Premain-Class": "io.warp10.sensision.Main")
      attributes("Implementation-Title": "sensision-service")
      attributes("Implementation-Version": version)
    }
  }

  task sensisionService(type: Jar, dependsOn: jar) {
    zip64 = true
    ext.suffixName = null != System.getProperty('sensision') ? System.getProperty('sensision') : ""
    appendix = "${suffixName}"


    manifest {
      attributes("Main-Class": "io.warp10.sensision.Main")
      attributes("Implementation-Title": "sensision-service")
      attributes("Implementation-Version": version)
    }

    println sourceSets.main.output.class
    from files(sourceSets.main.output.classesDirs.filter{})
    from {
      configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it).matching {
          include { it.toString().contains('guava') }
          include { it.toString().contains('jetty') }
          include { it.toString().contains('javax.servlet') }
          include { it.toString().contains('servlet-api') }
          include { it.toString().contains('groovy-all') }
          include { it.toString().contains('slf4j-api') }
          include { it.toString().contains('slf4j-log4j12') }
          include { it.toString().contains('log4j') }
        }
      }
    } {
      exclude 'META-INF/*.DSA'
      exclude 'META-INF/*.RSA'
      exclude 'about.html'
      exclude 'about_files/**'
      exclude 'plugin.properties'
      exclude 'jetty-dir.css'
    }
    with jar
  }

  task createTarArchive(type: Exec, dependsOn: sensisionService) {
    workingDir = '.'
    commandLine = [ 'src/main/shell/package.sh', getVersionName('') ]
  }

  publishing {
    publications {
      sensisionService(MavenPublication) {
        artifact("${buildDir}/libs/sensision-service-" + version + ".tar.gz") {
          extension = 'tar.gz'
        }
        groupId 'io.warp10'
        artifactId archivesBaseName
        version version
      }
    }
  }

  bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = [ 'sensisionService' ]
    publish = true

    pkg {
      repo = 'generic'
      name = archivesBaseName
      userOrg = 'senx'
      licenses = ['Apache-2.0']
      vcsUrl = 'https://github.com/senx/sensision.git'
      version {
        name = getVersionName('')
        released = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").format(new Date())
        vcsTag = getVersionName('')
      }
    }
  }

  bintrayUpload.dependsOn createTarArchive
  uploadArchives.dependsOn sensisionService
}

project(':sensision-lib') {
  version = updateRevision(getVersionName(''))
  archivesBaseName = 'sensision'
  group = 'io.warp10'

  jar {
    manifest {
      attributes("Premain-Class": "io.warp10.sensision.SensisionJMXAgent")
      attributes("Implementation-Title": archivesBaseName)
      attributes("Implementation-Version": version)
    }

    from project(":sensision").sourceSets.main.output
      include 'io/warp10/sensision/Sensision**'
      include 'io/warp10/sensision/hadoop/**'
      include 'io/warp10/sensision/kafka/**'
      include 'io/warp10/sensision/yammermetrics/**'

  }

  task sensisionLib(type: Jar, dependsOn: jar) {
    inputs.files jar.archivePath
    appendix 'lib'

    manifest {
      attributes("Premain-Class": "io.warp10.sensision.SensisionJMXAgent")
      attributes("Implementation-Title": "sensision")
      attributes("Implementation-Version": version)
    }

    doLast {
      manifest.writeTo("${buildDir}/MANIFEST.MF")
      project.ant {
        taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
        jarjar(jarfile: archivePath, manifest: "${buildDir}/MANIFEST.MF") {

          zipfileset(src: jar.archivePath) {
            include(name: 'io/warp10/sensision/Sensision**')
            include(name: 'io/warp10/sensision/hadoop/**')
            include(name: 'io/warp10/sensision/kafka/**')
            include(name: 'io/warp10/sensision/yammermetrics/**')
          }

          //
          // Iterate over .jar files
          //
          configurations.runtime.files.findAll {file ->
            for (name in ['jetty-', 'javax.servlet-']) {
              if (file.name.startsWith(name)) { return true; }
            }
            return false;
          }.each {jarjarFile ->
            zipfileset(src: jarjarFile) {
              exclude(name: 'META-INF/**')
              exclude(name: 'about.html')
              exclude(name: 'about_files/**')
              exclude(name: 'plugin.properties')
              exclude(name: 'jetty-dir.css')
            }
          }

          rule pattern: "io.warp10.sensision.**", result: "@0"
          rule pattern: "javax.management.**", result: "@0"
          rule pattern: "javax.servlet.**", result: "io.warp10.sensision.jarjar.@0"
          rule pattern: "javax.**", result: "@0"
          rule pattern: "org.apache.hadoop.**", result: "@0"
          rule pattern: "org.apache.commons.**", result: "@0"
          rule pattern: "org.**", result: "io.warp10.sensision.jarjar.@0"
        }
      }
    }
  }

  task sourceJar(type: Jar) {
    archiveClassifier = "sources"
  }

  task javadocJar(type: Jar) {
    archiveClassifier = "javadoc"
  }

  publishing {
    publications {
      sensisionlib(MavenPublication) {
        artifact sensisionLib
        artifact sourceJar
        artifact javadocJar
        groupId 'io.warp10'
        artifactId archivesBaseName
        version version
        pom {
          name = 'Sensision'
          // optionally artifactId can be defined here
          description = 'A java library for exposing metrics'	  
          url = 'https://github.com/senx/sensision'

          scm {
            connection = 'scm:git:git://github.com/senx/sensision.git'
            developerConnection = 'scm:git:git://github.com/senx/sensision.git'
            url = 'https://github.com/senx/sensision'
          }

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'senx'
              name = 'SenX'
              email = 'contact@senx.io'
            }
          }
        }
      }
    }
    repositories {
      maven {
        def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl

        credentials {
          username = ossrhUsername
          password = ossrhPassword
        }
      }
    }
  }


  java {
    withJavadocJar()
    withSourcesJar()
  }

  javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath

    options
    {
      setMemberLevel JavadocMemberLevel.PUBLIC
      setAuthor true

      links "https://docs.oracle.com/javase/8/docs/api/"
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.sensisionlib
  }

  javadoc {
      if(JavaVersion.current().isJava9Compatible()) {
          options.addBooleanOption('html5', true)
      }
  }
}
