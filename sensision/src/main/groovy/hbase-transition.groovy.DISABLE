//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

import java.io.PrintWriter;
import static io.warp10.sensision.Utils.*;

File tmpfile = null;

try {

  //
  // Master status: Ip/port
  //

  def ipMaster = '127.0.0.1'
  def portMaster = '16010'

  File OUTFILE = getMetricsFile('hbase-transition');

  //
  // Open the file with a '.pending' suffix so it does not get picked up while we fill it
  //

  File outfile = OUTFILE;
  tmpfile = new File("${OUTFILE.getAbsolutePath()}.pending");

  PrintWriter pw = new PrintWriter(tmpfile);

  //
  // Run the desired process
  //

  command = 'curl --silent --show-error --connect-timeout 10 http://' + ipMaster + ':' + portMaster + '/master-status'
  def p = command.execute()

  //
  // Consume its output
  //

  def out = new StringBuilder()
  def err = new StringBuilder()
  p.waitForProcessOutput(out, err)
  def metrics=[]
  def outputLines=[]

  //      
  // default transition/failed_open/failed_close: 0
  //
  metrics[0] = ['transition':0]
  metrics[0] = ['failed_open':0]
  metrics[0] = ['failed_close':0]
  int nbFailedOpen = 0
  int nbFailedClose = 0

  if (out) {
    out.eachLine { line ->
      if (line =~ /Total number of Regions in Transition for more than 60000 milliseconds/) {
        def matcher = line =~ /.*Total number of Regions in Transition for more than 60000 milliseconds<\/td><td>\s*([0-9]+)\s*<\/td.*>/
        if( matcher.matches() ) {
          metrics[0].'transition' = matcher.group(1) as int
        }
      } else if (line =~ /state\=FAILED_OPEN/) {
        nbFailedOpen++
      } else if (line =~ /state\=FAILED_CLOSE/) {
        nbFailedClose++
      }
    }
  }

  metrics[0].'failed_open' = nbFailedOpen
  metrics[0].'failed_close' = nbFailedClose

  if (err) { 
    println err
  }

  //
  // Common labels for all metrics
  //

  Map<String,String> commonLabels = [:];


  //
  // Output file
  //

  long now = System.currentTimeMillis() * 1000L;

  useful_metrics = [
    'transition':'hbase-transition',
    'failed_open':'hbase-failed_open',
    'failed_close':'hbase-failed_close'
  ]

  metrics.each {metric ->
    labels = [:];
    labels.putAll(commonLabels);
   for (m in useful_metrics) {
      storeMetric(pw, now, m.value, labels, (metric[m.key] != '')?metric[m.key] as int:0)
    }
  }

  try { if (null != pw) pw.close(); } catch (IOException ioe) {}

  //
  // Move file to final location
  //

  tmpfile.renameTo(outfile);

} catch (Exception e) {
  e.printStackTrace(System.err);

  // Make sure the temp file is deleted if there was an error
  if (null != tmpfile) {
    tmpfile.delete();
  }
}
