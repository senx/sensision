//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

/**
 * Produce metrics about ZooKeeper by running a shell script which collects
 * them from a server.
 */

import static io.warp10.sensision.Utils.*;

PrintWriter pw = null;
File tmpfile = null;

try {

  SHOW_ERRORS = false;

  populateSymbolTable(this);

  //
  // Common labels for all metrics
  //

  Map<String,String> commonLabels = [:];

  //
  // Output file
  //

  long now = System.currentTimeMillis() * 1000L;

  File OUTFILE = getMetricsFile('zookeeper');

  //
  // Open the file with a '.pending' suffix so it does not get picked up while we fill it
  //

  File outfile = OUTFILE;
  tmpfile = new File("${OUTFILE.getAbsolutePath()}.pending");

  OutputStream out = new FileOutputStream(tmpfile);
  pw = new PrintWriter(out);

  def p = (sensision_home + "/zk-sensision.sh").execute();

  p.text.eachLine {
    pw.println(it);
  }

  p.waitForOrKill(4000);
  pw.flush();

  if (p.exitValue() && SHOW_ERRORS) {
    System.err.println("[ERROR] - " + ${p.getErrorStream()});
  }

  pw.close()
  out.close();

  //
  // Move file to final location
  //

  tmpfile.renameTo(outfile);

} catch (Exception e) {
  e.printStackTrace(System.err);

  // Make sure the temp file is deleted if there was an error
  if (null != tmpfile) {
    tmpfile.delete();
  }
}
