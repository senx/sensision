#!/bin/bash
#
#   Copyright 2018  SenX S.A.S.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#


# Source function library.
if [ -e /etc/rc.d/init.d/functions ]; then

#
# sensision  Sensision metric collection service
#
# chkconfig: 2345 80 30
# description: Sensision collects various metrics and moves them to Cityzen Data

# Source function library.
. /etc/rc.d/init.d/functions
elif [ -e /lib/lsb/init-functions ]; then

### BEGIN INIT INFO
# Provides:          sensision
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Sensision metric collection service
# Description:       Sensision metric collection service
### END INIT INFO

# Source function library.
. /lib/lsb/init-functions
fi

VERSION=@VERSION@

#JAVA_HOME=/opt/java8

# Strongly inspired by gradlew
# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    elif [ -x "$JAVA_HOME/bin/java" ] ; then
        JAVACMD="$JAVA_HOME/bin/java"
    else
        JAVACMD="$JAVA_HOME/jre/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        echo "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
Please set the JAVA_HOME variable in your environment or in $0 to match the location of your Java installation."
        exit 1
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || (echo "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
Please set the JAVA_HOME variable in your environment or in $0 to match the location of your Java installation."; exit 1)
fi

#
# WARP10 jar and config dir are required to generate Sensision tokens
#
#WARP10_JAR=
#WARP10_CONFIG_DIR=

#SENSISION_HOME=/opt/sensision-${VERSION}

# If SENSISION_HOME is not defined, set it to the parent directory
if [ -z "${SENSISION_HOME}" ]; then
  SENSISION_HOME=`cd $(dirname $0); cd $(pwd -P)/..; pwd -P`
fi

export SENSISION_HOME


SENSISION_USER=sensision
SENSISION_GROUP=sensision
WARP10_GROUP=warp10
SENSISION_CONFIG=${SENSISION_HOME}/etc/sensision.conf
SENSISION_TOKENS=${SENSISION_HOME}/etc/sensision.tokens
SENSISION_JAR=${SENSISION_HOME}/bin/sensision-${VERSION}.jar
SENSISION_CP=${SENSISION_HOME}/etc:${SENSISION_JAR}
SENSISION_CLASS=io.warp10.sensision.Main
SENSISION_HEAP=64m
SENSISION_OPTS=-Dsensision.server.port=0
export MALLOC_ARENA_MAX=1

#
# PID File
#
PID_FILE=${SENSISION_HOME}/logs/sensision.pid

#
# Data directory that contains metrics, queued, targets directories
#
#SENSISION_DATA_DIR=/data

if [ -z "${SENSISION_DATA_DIR}" ]; then
  SENSISION_DATA_DIR=${SENSISION_HOME}
fi

moveDir() {
  dir=$1
  perm=$2
  if [ -e ${SENSISION_DATA_DIR}/${dir} ]; then
    echo "Error: ${SENSISION_DATA_DIR}/${dir} already exists"
    exit 1
  fi
  su ${SENSISION_USER} -c "mv ${SENSISION_HOME}/${dir} ${SENSISION_DATA_DIR}/ 2>&1"
  if [ $? != 0 ]; then
    echo "ERROR: move ${SENSISION_HOME}/${dir} to ${SENSISION_DATA_DIR}"
    exit 1
  fi
  ln -s ${SENSISION_DATA_DIR}/${dir} ${SENSISION_HOME}/${dir}
  chown ${SENSISION_USER}:${SENSISION_GROUP} ${SENSISION_DATA_DIR}/${dir}
  chmod ${perm} ${SENSISION_DATA_DIR}/${dir}

}

#
# Exit this script if user doesn't match
#
isUser() {
  if [ "`whoami`" != "${1}" ]; then
    echo "You must be '${1}' to run this script."
    exit 1
  fi
}

#
# Return 0 if a sensision instance is started
#
isStarted() {
  # Don't use 'ps -p' for docker compatibility
  if [ -e ${PID_FILE} ] && ps -Ao pid |  grep "^\s*$(cat ${PID_FILE})$" > /dev/null; then
    return 0
  fi
  return 1
}

CONFIG_FILES=
getConfigFiles() {
  # Get standard configuration directory
  if [[ -d "${WARP10_CONFIG_DIR}" ]]; then
    CONFIG_FILES=`find ${WARP10_CONFIG_DIR} -not -path "*/\.*" -name "*.conf" | sort | tr '\n' ' ' 2> /dev/null`
  fi

  # Get additional configuration directory
  if [[ -n "${WARP10_EXT_CONFIG_DIR}" && -d "${WARP10_EXT_CONFIG_DIR}" ]]; then
    CONFIG_FILES="${CONFIG_FILES} `find ${WARP10_EXT_CONFIG_DIR} -not -path "*/\.*" -name "*.conf" | sort | tr '\n' ' ' 2> /dev/null`"
  fi
}

bootstrap() {
  echo "Bootstrap Sensision.."

  #
  # Make sure the caller is root
  #
  isUser root

  #
  # Check if sensision user exists
  # Create it if not
  #
  if ! id -u "${SENSISION_USER}" >/dev/null 2>&1; then
    echo "User '${SENSISION_USER}'' does not exist - Creating it.."
    # Create user sensision and add it to warp10 group
    if [ "`which useradd`" = "" ]; then
      if [ "`which adduser`" != "" ]; then
        adduser -D -s -H -h ${SENSISION_HOME} -s /bin/bash ${SENSISION_USER}
        addgroup ${SENSISION_USER} ${WARP10_GROUP}
      else
        echo "Cannot create the ${SENSISION_USER} user with home directory ${SENSISION_HOME}. Create it manually then run the script again."
        exit 1
      fi
    else
      useradd -d ${SENSISION_HOME} -M -r ${SENSISION_USER} -G ${WARP10_GROUP} -s /bin/bash
    fi
  fi


  #
  # Fix ownership
  #
  echo "Fix ownership.."
  echo "SENSISION_HOME: ${SENSISION_HOME}"
  # Trailing slash is needed when ${SENSISION_HOME} is a symlink
  chown -R ${SENSISION_USER}:${SENSISION_GROUP} ${SENSISION_HOME}/

  #
  # Fix permissions
  #
  echo "Fix permissions.."
  # Everyone should have r+x permissions to SENSISION_HOME (targets, metrics)
  chmod 775 ${SENSISION_HOME}
  chmod 775 ${SENSISION_HOME}/bin
  chmod 775 ${SENSISION_HOME}/etc
  chmod 775 ${SENSISION_HOME}/templates
  chmod 775 ${SENSISION_HOME}/logs
  chmod 1733 ${SENSISION_HOME}/targets
  chmod 1733 ${SENSISION_HOME}/metrics
  chmod 700 ${SENSISION_HOME}/queued
  chmod -R 775 ${SENSISION_HOME}/scripts
  chmod 664 ${SENSISION_JAR}
  chmod 775 ${SENSISION_HOME}/bin/sensision.init

  # procDump: specific acls
  chown root:${SENSISION_GROUP} ${SENSISION_HOME}/bin/procDump
  chmod 4750 ${SENSISION_HOME}/bin/procDump

  #
  # ${SENSISION_HOME} != ${SENSISION_DATA_DIR}
  # A dedicated data directory has been provided
  # Move data to ${SENSISION_DATA_DIR}/metrics, ${SENSISION_DATA_DIR}/targets, ${SENSISION_DATA_DIR}/queued..
  #
  if [ "${SENSISION_DATA_DIR}" != "${SENSISION_HOME}" ]; then
    echo "SENSISION_DATA_DIR: ${SENSISION_DATA_DIR}"

    #
    # ${SENSISION_DATA_DIR} exists ?
    #
    if [ ! -e ${SENSISION_DATA_DIR} ]; then
      echo "${SENSISION_DATA_DIR} does not exist - Creating it..."
      mkdir -p ${SENSISION_DATA_DIR}
      if [ $? != 0 ]; then
        echo "${SENSISION_DATA_DIR} creation failed"
        exit 1
      fi
    fi

    # force ownerships / permissions
    chown ${SENSISION_USER}:${SENSISION_GROUP} ${SENSISION_DATA_DIR}
    # Everyone should have r+x permissions to SENSISION_DATA_DIR (targets, metrics)
    chmod 755 ${SENSISION_DATA_DIR}

    #
    # Test access to SENSISION_DATA_DIR and its parent directories
    #
    su ${SENSISION_USER} -c "ls ${SENSISION_DATA_DIR} 2>&1"
    if [ $? != 0 ]; then
      echo "ERROR: Cannot access to ${SENSISION_DATA_DIR}"
      exit 1
    fi

    # Move directories to ${SENSISION_DATA_DIR}
    moveDir logs 755
    moveDir etc 755
    moveDir scripts 775
    moveDir metrics 1733
    moveDir targets 1733
    moveDir queued 700
  fi

  # check /var/run/sensision does not exist during init..
  if [ -e /var/run/sensision ]; then
    echo "ERROR: /var/run/sensision already exists - Delete it before."
    exit 1
  fi

  if [ -e /etc/init.d/sensision ]; then
    echo "/etc/init.d/sensision already exists - Delete it.."
    rm /etc/init.d/sensision
  fi
  ln -s ${SENSISION_HOME}/bin/sensision.init /etc/init.d/sensision

  # log4j.properties
  cp ${SENSISION_HOME}/templates/log4j.properties.template ${SENSISION_HOME}/etc/log4j.properties

  sed -i -e "s_^sensision\.home.*_sensision\.home = ${SENSISION_HOME}_" ${SENSISION_HOME}/templates/sensision.template
  sed -i -e "s_^sensision\.scriptrunner\.root.*_sensision\.scriptrunner\.root = ${SENSISION_HOME}/scripts_" ${SENSISION_HOME}/templates/sensision.template
  sed -i -e "s_sensisionLog\.File=.*_sensisionLog\.File=${SENSISION_HOME}/logs/nohup.out_" ${SENSISION_HOME}/etc/log4j.properties

  getConfigFiles
  if [ "${CONFIG_FILES}" != "" ]; then
    echo "Sensision: generate configuration with Warp10 conf/jar.."
    echo "WARP10_CONFIG_DIR: ${WARP10_CONFIG_DIR}"
    echo "WARP10_EXT_CONFIG_DIR: ${WARP10_EXT_CONFIG_DIR}"
    echo "WARP10_JAR: ${WARP10_JAR}"

    # Edit the sensision-tokengen.mc2 to use or not the secret
    secret=`su ${SENSISION_USER} -c "${JAVACMD} -cp ${WARP10_JAR} io.warp10.WarpConfig ${CONFIG_FILES} . 'token.secret' | grep -e '^@CONF@ ' | sed -e 's/^@CONF@ //' | grep 'token.secret' | sed -e 's/^.*=//'"`
    if [[ "${secret}"  != "null" ]]; then
      sed -i -e "s|^{{secret}}|'"${secret}"'|" ${SENSISION_HOME}/templates/sensision-tokengen.mc2
    else
      sed -i -e "s|^{{secret}}||" ${SENSISION_HOME}/templates/sensision-tokengen.mc2
    fi

    # Generate initial tokens
    su ${SENSISION_USER} -c "${JAVACMD} -cp ${WARP10_JAR} io.warp10.worf.TokenGen ${CONFIG_FILES} ${SENSISION_HOME}/templates/sensision-tokengen.mc2 ${SENSISION_TOKENS}"
    sed  -i 's/^.\{1\}//;$ s/.$//' ${SENSISION_TOKENS} # Remove first and last character

    TOKEN_TYPE="write"
    WRITE_TOKEN="$(cat ${SENSISION_TOKENS} | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w "${TOKEN_TYPE}" | cut -d'|' -f 3 | tr -d '\n\r')"
    cp ${SENSISION_HOME}/templates/sensision.template ${SENSISION_CONFIG}
    sed -i 's/@warp:WriteToken@/'"${WRITE_TOKEN}"'/' ${SENSISION_CONFIG}
    chown ${SENSISION_USER}:${SENSISION_GROUP} ${SENSISION_CONFIG}
    chmod 664 ${SENSISION_CONFIG}
  else
    echo "No file found in '${WARP10_CONFIG_DIR}' or 'WARP10_CONFIG_DIR' is not set. Skip generation of Sensision configuration - Copy template as it is"
    cp ${SENSISION_HOME}/templates/sensision.template ${SENSISION_CONFIG}
    chown ${SENSISION_USER}:${SENSISION_GROUP} ${SENSISION_CONFIG}
    chmod 664 ${SENSISION_CONFIG}
    echo "Starting is going to be stopped - Update configuration '${SENSISION_CONFIG}' manually and restart Sensision"
    exit 2
  fi
}

start() {

  if isStarted; then
    echo "Start failed! - A Sensision instance is currently running"
    exit 1
  fi

  #
  # Config file exists ?
  #
  if [ ! -e ${SENSISION_CONFIG} ]; then
    echo "Config file does not exist - Creating it from template..."
    bootstrap
  fi

  # /var/run/sensision may have been deleted after reboot
  if [ ! -e /var/run/sensision ]; then
    echo "Create /var/run/sensision.."
    mkdir /var/run/sensision
    if [ $? != 0 ]; then
      echo "ERROR: Cannot create /var/run/sensision"
      exit 1
    fi
    chown -R ${SENSISION_USER}:${SENSISION_GROUP} /var/run/sensision
    chmod 755 /var/run/sensision
    ln -s ${SENSISION_DATA_DIR}/metrics /var/run/sensision/metrics
    ln -s ${SENSISION_DATA_DIR}/targets /var/run/sensision/targets
    ln -s ${SENSISION_DATA_DIR}/queued /var/run/sensision/queued
  fi

  #
  # Start..
  #
  su "${SENSISION_USER}" -c "${JAVACMD} -Xmx${SENSISION_HEAP} ${SENSISION_OPTS} -Dsensision.config=${SENSISION_CONFIG} -cp ${SENSISION_CP} ${SENSISION_CLASS} >> ${SENSISION_HOME}/logs/sensision.log 2>&1 & echo \$! > ${PID_FILE}"

  isStarted
  if [ $? -eq 1 ]; then
    echo "Start failed! - See sensision.log for more details"
    exit 1
  fi
}

stop() {

  #
  # Make sure the caller is SENSISION_USER
  #
#  isUser ${SENSISION_USER}

  if isStarted; then
    kill $(cat ${PID_FILE})
    rm -f ${PID_FILE}
  else
    echo "No instance of Sensision is currently running"
  fi
}

status() {

  #
  # Make sure the caller is SENSISION_USER
  #
#  isUser ${SENSISION_USER}

  if isStarted; then
    ps -Ao pid,etime,args | grep "^\s*$(cat ${PID_FILE})\s"
  else
    echo "No instance of sensision is currently running"
  fi
}


# See how we were called.
case "$1" in
  bootstrap)
    bootstrap
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  *)
    echo $"Usage: $0 {bootstrap|start|stop|status}"
  exit 2
esac

exit $?
